// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [citext(map: "citext")]
}

enum ContributorType {
  INDIVIDUAL
  CONFERENCE
}

enum MediaType {
  AUDIO
  VIDEO
  TEXT
}

enum MediaSource {
  ARCHIVE
  YOUTUBE
  BUNNY
}

model Contributor {
  id Int     @default(autoincrement()) @id

  fullName String @unique @db.Citext
  fullNameSlug String @db.Citext

  description String? // todo: bio
  imageUrl String? // todo: profileImage
  featured Boolean @default(false)

  type ContributorType @default(INDIVIDUAL)

  sermons Sermon[]
  images ContributorImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContributorImage {
  id Int @default(autoincrement()) @id
  originalId Int?

  contributor Contributor @relation(fields: [contributorId], references: [id])
  contributorId Int

  url String @db.Citext

  title String?
  description String?

  takenAt DateTime?
  createdAt DateTime @default(now())
}

model Sermon {
  @@unique([title, contributorId])

  id Int @default(autoincrement()) @id
  originalId String?

  contributor Contributor @relation(fields: [contributorId], references: [id])
  contributorId Int

  title String @db.Citext
  description String?

  urls SermonUrl[]

  bibleReferences SermonBibleReference[]
  topics Topic[]
  transcript SermonText?

  hits Int @default(0)
  featured Boolean @default(false)
  previouslyFeatured Boolean @default(false)

  preachedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SermonUrl {
  id Int @default(autoincrement()) @id

  type MediaType
  source MediaSource

  sermon Sermon @relation(fields: [sermonId], references: [id])
  sermonId Int

  url String @db.Citext
}

model SermonBibleReference {
  id Int @default(autoincrement()) @id  

  book String @db.Citext

  startChapter Int?
  endChapter Int?
  
  startVerse Int?
  endVerse Int?

  text String

  sermon Sermon @relation(fields: [sermonId], references: [id])
  sermonId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SermonText {
  id Int @default(autoincrement()) @id

  sermon Sermon @relation(fields: [sermonId], references: [id])
  sermonId Int @unique

  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  name String @unique @id @db.Citext

  // TODO: rename this to sermons
  sermon Sermon[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// publication & sections
// type book, commentary, article, devotional...

// model Book {
//   name String @unique @id @db.Citext

//   chapters Chapter[]
  
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Chapter {
//   id Int @default(autoincrement()) @id

//   book Book @relation(fields: [bookName], references: [name])
//   bookName String

//   number Int

//   verses Verse[]
  
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }